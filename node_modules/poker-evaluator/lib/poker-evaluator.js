"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evalHand = void 0;
var tslib_1 = require("tslib");
var fs = tslib_1.__importStar(require("fs"));
var path = tslib_1.__importStar(require("path"));
var constants_1 = require("./constants");
var three_card_converter_1 = tslib_1.__importDefault(require("./three-card-converter"));
// This is outside the class so evalHand is static, to keep same api as @chenosaurus/poker-evaluator
var RANKS_DATA = fs.readFileSync(path.join(__dirname, '../data/HandRanks.dat'));
function evalHand(cards) {
    if (!RANKS_DATA) {
        throw new Error('HandRanks.dat not loaded.');
    }
    if (cards.length !== 7
        && cards.length !== 6
        && cards.length !== 5
        && cards.length !== 3) {
        throw new Error("Hand must be 3, 5, 6, or 7 cards, but " + cards.length + " cards were provided");
    }
    if (cardsAreValidStrings(cards)) {
        var stringCards = cards;
        if (stringCards.length === 3) { // If a 3 card hand, fill in to make 5 card
            stringCards = three_card_converter_1.default.fillHand(stringCards);
        }
        return evaluate(convertCardsToNumbers(stringCards));
    }
    else if (cardsAreValidNumbers(cards)) {
        if (cards.length === 3) {
            throw new Error("Please supply 3 card hands as string[] of \"cards\" only.");
        }
        return evaluate(cards);
    }
    else {
        throw new Error("\n      Please supply input as a valid string[] | number[] of \"cards\".\n      See src/constants/deck.const.ts for the deck's values\n    ");
    }
}
exports.evalHand = evalHand;
function evalCard(card) {
    return RANKS_DATA.readUInt32LE(card * 4);
}
function convertCardsToNumbers(cards) {
    return cards.map(function (card) { return constants_1.DECK[card.toLowerCase()]; });
}
function cardsAreValidStrings(cards) {
    return cards.every(function (card) {
        return typeof card === 'string' && Object.keys(constants_1.DECK).includes(card.toLowerCase());
    });
}
function cardsAreValidNumbers(cards) {
    return cards.every(function (card) {
        return typeof card === 'number' && Object.values(constants_1.DECK).includes(card);
    });
}
function evaluate(cardValues) {
    var p = 53;
    cardValues.forEach(function (cardValue) { return p = evalCard(p + cardValue); });
    if (cardValues.length === 5 || cardValues.length === 6) {
        p = evalCard(p);
    }
    return {
        handType: p >> 12,
        handRank: p & 0x00000fff,
        value: p,
        handName: constants_1.HAND_TYPES[p >> 12]
    };
}
//# sourceMappingURL=poker-evaluator.js.map